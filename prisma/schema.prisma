datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?
  tags          String[]
  accounts      Account[]
  role          UserRole  @default(USER)
  blogs Blog[]
  claps Clap[]
  followers Follow[] @relation("Following")
  followings Follow[] @relation("Follower")
  commentClaps CommentClap[]
  bookmarks Bookmark[]
  comments Comment[]
  repliedToComments Comment[] @relation("ReplyToUser")
  receivedNotifications Notification[] @relation("NotificationReceived")
  sentNotifications Notification[] @relation("NotificationSent")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Follow {
  id         String   @id @default(cuid())
  followerId String
  followingId String
  createdAt  DateTime @default(now())

  follower User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  USER
  ADMIN
}

model Blog {
  id         String   @id @default(cuid())
  userId     String
  title      String
  content    String
  coverImage String?
  tags       String[]
  isPublished Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claps Clap[]
  bookmarks Bookmark[]
  comments Comment[]
  notifications Notification[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Clap {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  parentId  String?
  repliedToUserId String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claps CommentClap[]
  notifications Notification[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  parent Comment? @relation("OneLevelThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("OneLevelThread")
  repliedToUser User? @relation("ReplyToUser", fields: [repliedToUserId], references: [id], onDelete: Cascade)
}

model CommentClap {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

enum NotificationType {
  NEW_COMMENT
  COMMENT_REPLY
  NEW_CLAP
  FOLLOW
  SYSTEM_ALERT
}

enum EntityType {
  BLOG
  COMMENT
  USER
  SYSTEM
}

model Notification {
  id           String   @id @default(cuid())
  recipientId  String
  senderId     String
  type         NotificationType
  blogId       String?
  commentId    String?
  entityType   EntityType?
  content      String?
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())

  recepient User @relation("NotificationReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  sender User @relation("NotificationSent", fields: [senderId], references: [id], onDelete: Cascade)
  blog Blog? @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}